[versions]

agp = "8.5.2"
android-compileSdk = "34"
android-minSdk = "24"
android-targetSdk = "34"
androidx-activityCompose = "1.10.0"
androidx-lifecycle = "2.8.4"
compose-plugin = "1.7.1"
kotlin = "2.0.21"
kotlinx-coroutines = "1.9.0"
ktor = "3.0.3"
logback = "1.5.8"
composeIcons = "1.1.1"
koin = "4.0.0-RC1"
coil = "3.0.0-rc01"
supabase = "3.0.3"
buildConfig = "5.5.1"
googleid-android = "1.1.1"
secure-random = "0.3.2"
android-security-crypto = "1.0.0"
multiplatform-settings = "1.3.0"
datastore = "1.1.2"

[bundles]

shared = []

common = [
    "kotlinx-coroutines-core",
    #"kotlinx-datetime",
    "ktor-serialization-kotlinx-json",
]

frontend = [
    "coil",
    "coil-network-ktor",
    "composeIcons-featherIcons",
    "koin-compose",
    "koin-compose-viewmodel",
    "supabase-composables",
    "ktor-client-core",
    "ktor-client-logging",
    "ktor-client-json",
    "ktor-client-serialization",
    "ktor-client-content-negotiation",
    "secure-random",
    "multiplatform-settings",
    "multiplatform-settings-coroutines",
    "multiplatform-settings-datastore",
    "multiplatform-settings-serialization",
    "datastore-preferences"
]

server = [
    "logback",
    "ktor-server-core",
    "ktor-server-netty",
    "ktor-server-content-negotiation",
    "ktor-server-auth-jwt",
    "ktor-client-cio",
    "ktor-client-content-negotiation",
    "ktor-server-sse",
    #"ktor-server-serialization",
    "kotlin-test-junit",
]

android = [
    "androidx-activity-compose",
    "androidx-lifecycle-viewmodel",
    "androidx-lifecycle-runtime-compose",
    "ktor-client-cio",
    "koin-android",
    "koin-androidx-compose",
    "kotlinx-coroutines-android",
    "googleid-android",
    "android-security-crypto"
]
ios = ["ktor-client-darwin"]
desktop = ["ktor-client-cio", "kotlinx-coroutines-swing", "ktor-server-netty"]

[libraries]
# Shared
# Common
#kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version = "k-datetime,,0.6.1" }
ktor-serialization-kotlinx-json = { group = "io.ktor", name = "ktor-serialization-kotlinx-json", version.ref = "ktor" }
# Server
# ktor-server-serialization = { group = "io.ktor", name = "ktor-server-serialization", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-sse = { module = "io.ktor:ktor-server-sse", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" } # todo used?
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

# Frontend
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatform-settings" }
multiplatform-settings-datastore = { module = "com.russhwolf:multiplatform-settings-datastore", version.ref = "multiplatform-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatform-settings" }
datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "datastore" }

android-security-crypto = { module = "androidx.security:security-crypto", version.ref = "android-security-crypto" }
secure-random = { module = "org.kotlincrypto:secure-random", version.ref = "secure-random" }
kotlinx-coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
composeIcons-featherIcons = { module = "br.com.devsrsouza.compose.icons:feather", version.ref = "composeIcons" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koin" }
coil = { module = "io.coil-kt.coil3:coil-compose-core", version.ref = "coil" }
coil-network-ktor = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
ktor-client-core = { group = "io.ktor", name = "ktor-client-core", version.ref = "ktor" }
ktor-client-logging = { group = "io.ktor", name = "ktor-client-logging", version.ref = "ktor" }
ktor-client-json = { group = "io.ktor", name = "ktor-client-json", version.ref = "ktor" }
ktor-client-serialization = { group = "io.ktor", name = "ktor-client-serialization", version.ref = "ktor" }
ktor-client-content-negotiation = { group = "io.ktor", name = "ktor-client-content-negotiation", version.ref = "ktor" }
# Auth Field composables and authentication
supabase-composables = { group = "io.github.jan-tennert.supabase", name = "compose-auth-ui", version.ref = "supabase" }
# Android
#// Android 13 and below. optional - needed for credentials support from play services, for devices running implementation("androidx.credentials:credentials-play-services-auth:<latest version>")
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
googleid-android = { module = "com.google.android.libraries.identity.googleid:googleid", version.ref = "googleid-android" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-androidx-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
# IOS
ktor-client-darwin = { group = "io.ktor", name = "ktor-client-darwin", version.ref = "ktor" }
# Android, Desktop, server
ktor-client-cio = { group = "io.ktor", name = "ktor-client-cio", version.ref = "ktor" }
# Desktop
kotlinx-coroutines-swing = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }

[plugins]
# server
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
# server & Shared todo?
kotlinxSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
# server & Frontend
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
# common
androidLibrary = { id = "com.android.library", version.ref = "agp" }
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfig" }
#build-konfig = { module = "com.codingfeline.buildkonfig:buildkonfig-gradle-plugin", version.ref = "build-konfig" }
# frontend & common
androidApplication = { id = "com.android.application", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }